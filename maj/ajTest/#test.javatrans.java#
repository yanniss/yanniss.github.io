package maj.ajTest;


import java.io.*;
import org.aspectj.compiler.base.*;
import org.aspectj.compiler.base.ast.*;
import org.aspectj.compiler.base.cst.*;
import org.aspectj.compiler.crosscuts.ast.*;

public class test {
	public static void main(String[] myargs)  {
		ASTObject id1 = new Identifier("foo");
		Identifier id2 = new Identifier("foo");
		ASTObject id3 = new Identifier("foo");
		Identifier id4 = new Identifier("foo");
		ASTObject pack1 = new Identifier(new Identifier("foo"), new Identifier("bar"));
		ASTObject pack2 = new Identifier(new Identifier(new Identifier("java"), new Identifier("lang")), pack1);
		ASTObject selfid1 = pack1;
		ASTObject selfid2 = pack1;
		System.out.println(id1.unparse());
		System.out.println(id2.unparse());
		System.out.println(id3.unparse());
		System.out.println(id4.unparse());
		System.out.println(pack1.unparse());
		System.out.println(pack2.unparse());
		ASTObject name1 = new AnyName();
		NamePattern name2 = new SimpleName("Foo.*");
		ASTObject name3 = new SimpleName("Foo.*");
		NamePattern name4 = new SimpleName("foo");
		ASTObject packStar = new SimpleName("java.lang.*");
		ASTObject selfname1 = new SimpleName("MAJ_UNQUOTE_IDENT_PATTERN");
		ASTObject selfname2 = new SimpleName("MAJ_UNQUOTE_IDENT_PATTERN");
		System.out.println(name1.unparse());
		System.out.println(name2.unparse());
		System.out.println(name3.unparse());
		System.out.println(packStar.unparse());
		ASTObject mods1 = new Modifiers(9);
		Modifiers mods2 = new Modifiers(9);
		ASTObject mods3 = new Modifiers(9);
		Modifiers mods4 = new Modifiers(9);
		ASTObject selfmods1 = mods4;
		ASTObject selfmods2 = mods4;
		System.out.println(mods1.unparse());
		System.out.println(mods2.unparse());
		System.out.println(mods3.unparse());
		System.out.println(mods4.unparse());
		System.out.println(selfmods1.unparse());
		System.out.println(selfmods2.unparse());
		ASTObject imp1 = new Import("java.lang.*");
		Import imp2 = new Import("java.lang.*");
		ASTObject imp3 = new Import("java.lang.*");
		Import imp4 = new Import("java.lang.*");
		ASTObject selfimp1 = imp4;
		ASTObject selfimp2 = imp4;
		System.out.println(imp1.unparse());
		System.out.println(imp2.unparse());
		System.out.println(imp3.unparse());
		System.out.println(imp3.unparse());
		System.out.println(selfimp1.unparse());
		System.out.println(selfimp2.unparse());
		ASTObject type1 = new ResolvedTypeD(new MajUncheckedType("int"));
		ASTObject type2 = new ArrayTypeD(new ResolvedTypeD(new MajUncheckedType("int")));
		ASTObject type3 = new ArrayTypeD(new ArrayTypeD(new ResolvedTypeD(new MajUncheckedType("int"))));
		TypeD type4 = new ResolvedTypeD(new MajUncheckedType("int"));
		ASTObject type5 = new ResolvedTypeD(new MajUncheckedType("int"));
		TypeD type6 = new ArrayTypeD(new ResolvedTypeD(new MajUncheckedType("int")));
		TypeD type7 = new ResolvedTypeD(new MajUncheckedType("Foo.Bar"));
		TypeD type8 = type1;
		TypeD type9 = type1;
		TypeD type10 = new ArrayTypeD(type1);
		ASTObject selftyp1 = type4;
		ASTObject selftyp2 = type4;
		System.out.println(type1.unparse());
		System.out.println(type2.unparse());
		System.out.println(type3.unparse());
		System.out.println(type4.unparse());
		System.out.println(type5.unparse());
		System.out.println(type6.unparse());
		System.out.println(type7.unparse());
		System.out.println(type8.unparse());
		System.out.println(type9.unparse());
		System.out.println(selftyp1.unparse());
		System.out.println(selftyp2.unparse());
		ASTObject expr1 = new VarExpr(new Identifier("foo"));
		ASTObject expr2 = new IntLiteralExpr(32);
		ASTObject expr3 = new StringLiteralExpr("\"abc\"");
		ASTObject expr4 = new FloatLiteralExpr(32.30F);
		ASTObject expr5 = new BooleanLiteralExpr(true);
		ASTObject expr6 = new BooleanLiteralExpr(false);
		ASTObject expr7 = new NullExpr();
		ASTObject expr8 = new ThisExpr();
		ASTObject expr9 = new SuperExpr();
		ASTObject expr10 = new PostfixExpr(new VarExpr(new Identifier("foo")), "--");
		ASTObject expr11 = new CallExpr(new VarExpr(new Identifier("a")), "super", new Exprs(new Expr[] {new VarExpr(new Identifier("a")), new VarExpr(new Identifier("b")), new VarExpr(new Identifier("c"))}));
		ASTObject expr12 = UnopExpr.build("~", new VarExpr(new Identifier("foo")));
		ASTObject expr13 = UnopExpr.build("!", new VarExpr(new Identifier("foo")));
		ASTObject expr14 = UnopExpr.build("-", new VarExpr(new Identifier("foo")));
		ASTObject expr15 = UnopExpr.build("+", new VarExpr(new Identifier("foo")));
		ASTObject expr16 = UnopExpr.build("++", new VarExpr(new Identifier("foo")));
		ASTObject expr17 = UnopExpr.build("--", new VarExpr(new Identifier("foo")));
		ASTObject expr18 = new IntLiteralExpr(1) * new IntLiteralExpr(3) / new IntLiteralExpr(2) * new IntLiteralExpr(2);
		ASTObject expr19 = new IntLiteralExpr(1) * new IntLiteralExpr(3) - new IntLiteralExpr(4) / new IntLiteralExpr(2);
		ASTObject expr20 = new ShiftOpExpr(new IntLiteralExpr(1), ">>", new VarExpr(new Identifier("foo")));
		System.out.println(expr1.unparse());
		System.out.println(expr2.unparse());
		System.out.println(expr3.unparse());
		System.out.println(expr4.unparse());
		System.out.println(expr5.unparse());
		System.out.println(expr6.unparse());
		System.out.println(expr7.unparse());
		System.out.println(expr8.unparse());
		System.out.println(expr9.unparse());
		System.out.println(expr10.unparse());
		System.out.println(expr11.unparse());
		System.out.println(expr12.unparse());
		System.out.println(expr13.unparse());
		System.out.println(expr14.unparse());
		System.out.println(expr15.unparse());
		System.out.println(expr16.unparse());
		System.out.println(expr17.unparse());
		System.out.println(expr18.unparse());
		System.out.println(expr19.unparse());
		System.out.println(expr20.unparse());
	}
}
